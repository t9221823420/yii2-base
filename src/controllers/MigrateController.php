<?php
/**
 * Created by PhpStorm.
 * User: bw_dev
 * Date: 25.03.2018
 * Time: 17:06
 */

namespace yozh\base\controllers;

use yii\console\ExitCode;
use yii\helpers\Console;

class MigrateController extends \yii\console\controllers\MigrateController
{
	
	public $mode;
	
	public function actionMask( $mask )
	{
		$newMigrations = $this->getNewMigrations();
		
		$migrations = null;
		foreach( (array)$newMigrations as $migration ) {
			if( strpos( $migration, $mask ) !== false ) {
				$migrations[] = $migration;
			}
		}
		
		if ( $migrations ){
			return $this->actionUp( $migrations );
		}
		else{
			$this->stdout( "No new migrations found. Your system is up-to-date.\n", Console::FG_GREEN );
		}
		
		
	}
	
	/**
	 * Upgrades the application by applying new migrations.
	 *
	 * For example,
	 *
	 * ```
	 * yii migrate     # apply all new migrations
	 * yii migrate 3   # apply the first 3 new migrations
	 * ```
	 *
	 * @param int $limit the number of new migrations to be applied. If 0, it means
	 * applying all available new migrations.
	 *
	 * @return int the status of the action execution. 0 means normal, other values mean abnormal.
	 */
	public function actionUp( $data = 0 )
	{
		$result = $this->getNewMigrations( $data );
		
		if( $result == ExitCode::OK ){
			return ExitCode::OK;
		}
		else{
			$migrations = $result;
		}
		
		$total = count( $migrations );
		$n = count( $migrations );
		if( $n === $total ) {
			$this->stdout( "Total $n new " . ( $n === 1 ? 'migration' : 'migrations' ) . " to be applied:\n", Console::FG_YELLOW );
		}
		else {
			$this->stdout( "Total $n out of $total new " . ( $total === 1 ? 'migration' : 'migrations' ) . " to be applied:\n", Console::FG_YELLOW );
		}
		
		foreach( $migrations as $migration ) {
			$nameLimit = $this->getMigrationNameLimit();
			if( $nameLimit !== null && strlen( $migration ) > $nameLimit ) {
				$this->stdout( "\nThe migration name '$migration' is too long. Its not possible to apply this migration.\n", Console::FG_RED );
				
				return ExitCode::UNSPECIFIED_ERROR;
			}
			$this->stdout( "\t$migration\n" );
		}
		$this->stdout( "\n" );
		
		$applied = 0;
		if( $this->confirm( 'Apply the above ' . ( $n === 1 ? 'migration' : 'migrations' ) . '?' ) ) {
			foreach( $migrations as $migration ) {
				if( !$this->migrateUp( $migration ) ) {
					$this->stdout( "\n$applied from $n " . ( $applied === 1 ? 'migration was' : 'migrations were' ) . " applied.\n", Console::FG_RED );
					$this->stdout( "\nMigration failed. The rest of the migrations are canceled.\n", Console::FG_RED );
					
					return ExitCode::UNSPECIFIED_ERROR;
				}
				$applied++;
			}
			
			$this->stdout( "\n$n " . ( $n === 1 ? 'migration was' : 'migrations were' ) . " applied.\n", Console::FG_GREEN );
			$this->stdout( "\nMigrated up successfully.\n", Console::FG_GREEN );
		}
	}
	
	protected function getNewMigrations( $data = null )
	{
		
		if( is_array( $data ) && count( $data ) ) {
			$migrations = $data;
		}
		else {
			
			$migrations = parent::getNewMigrations();
			
			if( empty( $migrations ) ) {
				
				$this->stdout( "No new migrations found. Your system is up-to-date.\n", Console::FG_GREEN );
				
				return ExitCode::OK;
			}
			
			$data = (int)$data;
			
			if( $data > 0 ) {
				$migrations = array_slice( $migrations, 0, $data );
			}
		}
		
		return $migrations;
	}
	
	protected function addMigrationHistory( $version )
	{
		if( !preg_match( '/_dev$/', $version ) ) {
			parent::addMigrationHistory( $version ); // TODO: Change the autogenerated stub
		}
	}
}